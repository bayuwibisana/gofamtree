{
	"info": {
		"_postman_id": "family-tree-api-collection",
		"name": "Family Tree API Enhanced",
		"description": "A comprehensive collection for testing the Family Tree API endpoints with enhanced relationship tables and house-based organization. This API allows you to manage family members, establish relationships, generate family trees, and view relationship matrices.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains status OK\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Person (Root)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response contains person data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property(\"id\");",
							"    pm.expect(jsonData.data).to.have.property(\"first_name\");",
							"    pm.expect(jsonData.data).to.have.property(\"last_name\");",
							"});",
							"",
							"// Save person ID for other requests",
							"if (pm.response.code === 201) {",
							"    var responseJson = pm.response.json();",
							"    pm.environment.set(\"father_id\", responseJson.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"gender\": \"male\",\n    \"birth_date\": \"1970-05-15T00:00:00Z\",\n    \"biography\": \"Family patriarch and founder of the Smith family tree.\",\n    \"photo_url\": \"https://example.com/photos/john-smith.jpg\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/persons",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Person (Mother)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Save mother ID for child creation",
							"if (pm.response.code === 201) {",
							"    var responseJson = pm.response.json();",
							"    pm.environment.set(\"mother_id\", responseJson.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Mary\",\n    \"last_name\": \"Smith\",\n    \"gender\": \"female\",\n    \"birth_date\": \"1975-08-22T00:00:00Z\",\n    \"biography\": \"Loving mother and wife in the Smith family.\",\n    \"photo_url\": \"https://example.com/photos/mary-smith.jpg\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/persons",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Person (Child)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Child has correct parent relationships\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.father_id).to.eql(parseInt(pm.environment.get(\"father_id\")));",
							"    pm.expect(jsonData.data.mother_id).to.eql(parseInt(pm.environment.get(\"mother_id\")));",
							"});",
							"",
							"// Save child ID for other tests",
							"if (pm.response.code === 201) {",
							"    var responseJson = pm.response.json();",
							"    pm.environment.set(\"child_id\", responseJson.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Alice\",\n    \"last_name\": \"Smith\",\n    \"gender\": \"female\",\n    \"birth_date\": \"2000-12-10T00:00:00Z\",\n    \"biography\": \"First child of John and Mary Smith.\",\n    \"father_id\": {{father_id}},\n    \"mother_id\": {{mother_id}}\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/persons",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Persons",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains data array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array');",
							"    pm.expect(jsonData.data.length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Person by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains person details\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property(\"id\");",
							"    pm.expect(jsonData.data).to.have.property(\"first_name\");",
							"    pm.expect(jsonData.data).to.have.property(\"last_name\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons/{{father_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons",
						"{{father_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Person",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Person updated successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.biography).to.include(\"Updated biography\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"gender\": \"male\",\n    \"birth_date\": \"1970-05-15T00:00:00Z\",\n    \"biography\": \"Updated biography: Family patriarch and founder of the Smith family tree. Loves gardening and reading.\",\n    \"photo_url\": \"https://example.com/photos/john-smith-updated.jpg\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/persons/{{father_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons",
						"{{father_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Persons",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Search results contain matching persons\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array');",
							"    if (jsonData.data.length > 0) {",
							"        var person = jsonData.data[0];",
							"        var fullName = person.first_name + \" \" + person.last_name;",
							"        pm.expect(fullName.toLowerCase()).to.include(\"smith\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons/search?q=Smith",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "Smith"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Family Tree",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Family tree structure is valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property(\"person\");",
							"    pm.expect(jsonData.data).to.have.property(\"children\");",
							"    pm.expect(jsonData.data.children).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Family tree contains root person\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.person).to.have.property(\"first_name\");",
							"    pm.expect(jsonData.data.person).to.have.property(\"last_name\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons/{{father_id}}/family-tree",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons",
						"{{father_id}}",
						"family-tree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Family Relationships Table (NEW)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains relationships table\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property(\"relationships_table\");",
							"    pm.expect(jsonData.data).to.have.property(\"houses\");",
							"    pm.expect(jsonData.data).to.have.property(\"summary\");",
							"});",
							"",
							"pm.test(\"Relationships table is properly formatted\", function () {",
							"    var jsonData = pm.response.json();",
							"    var table = jsonData.data.relationships_table;",
							"    pm.expect(table).to.be.an('array');",
							"    if (table.length > 0) {",
							"        var entry = table[0];",
							"        pm.expect(entry).to.have.property(\"name\");",
							"        pm.expect(entry).to.have.property(\"father\");",
							"        pm.expect(entry).to.have.property(\"mother\");",
							"        pm.expect(entry).to.have.property(\"house\");",
							"    }",
							"});",
							"",
							"pm.test(\"Houses organization is valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    var houses = jsonData.data.houses;",
							"    pm.expect(houses).to.be.an('object');",
							"    pm.expect(Object.keys(houses).length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons/search?format=relationships-table",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons",
						"search"
					],
					"query": [
						{
							"key": "format",
							"value": "relationships-table",
							"description": "Get family relationships in table format"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Person with All Relationships (NEW)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains comprehensive relationship data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property(\"person\");",
							"    pm.expect(jsonData.data).to.have.property(\"children\");",
							"    pm.expect(jsonData.data).to.have.property(\"siblings\");",
							"    pm.expect(jsonData.data).to.have.property(\"relationships\");",
							"});",
							"",
							"pm.test(\"Person details are included\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.person).to.have.property(\"first_name\");",
							"    pm.expect(jsonData.data.person).to.have.property(\"last_name\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons/{{father_id}}/relationships",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons",
						"{{father_id}}",
						"relationships"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get House Organization - Johnson Family (NEW)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains house data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('object');",
							"    pm.expect(Object.keys(jsonData.data)).to.include('Johnson');",
							"});",
							"",
							"pm.test(\"Johnson house has members\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.data.Johnson) {",
							"        pm.expect(jsonData.data.Johnson).to.be.an('array');",
							"        pm.expect(jsonData.data.Johnson.length).to.be.at.least(1);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons"
					]
				}
			},
			"response": []
		},
		{
			"name": "Family Statistics Summary (NEW)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Summary contains statistics\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.data && jsonData.data.summary) {",
							"        pm.expect(jsonData.data.summary).to.have.property(\"total_people\");",
							"        pm.expect(jsonData.data.summary).to.have.property(\"total_houses\");",
							"        pm.expect(jsonData.data.summary.total_people).to.be.a('number');",
							"        pm.expect(jsonData.data.summary.total_houses).to.be.a('number');",
							"    }",
							"});",
							"",
							"pm.test(\"Family data is comprehensive\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.data && jsonData.data.relationships_table) {",
							"        pm.expect(jsonData.data.relationships_table.length).to.be.at.least(3);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons/search?format=relationships-table",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons",
						"search"
					],
					"query": [
						{
							"key": "format",
							"value": "relationships-table"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Person with Invalid Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message is present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"gender\": \"invalid\",\n    \"father_id\": 99999,\n    \"mother_id\": 99999\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/persons",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Person (Child)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"deleted successfully\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons/{{child_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons",
						"{{child_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Non-existent Person",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error message for not found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include(\"not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/persons/99999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"persons",
						"99999"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
} 